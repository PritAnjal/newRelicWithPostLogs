<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-suite.xml" />
	<munit:test name="sendMessageToAWSSQS-test_Failure" doc:id="226737f4-17c0-48cc-82da-dc30d1880b2a">
			<munit:behavior>
				<munit:set-event doc:name="Set Input" doc:id="f8f79d84-9ad6-4dfa-8252-abe3978a0b8d">
				<munit:attributes value="#[readUrl('classpath://sendMessageToAWSSQStestSuccess1\set-event_attributes.dwl')]" />
				</munit:set-event>
			</munit:behavior>
			<munit:execution>
			<try doc:name="Try" doc:id="00904590-a00a-4d8d-8f69-c8def5251a73" >
				<flow-ref doc:name="sendMessageToAWSSQS" doc:id="56550606-4d7e-4ce0-a717-10d6d2022318" name="sendMessageToAWSSQS" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="a98d18c4-547f-422b-bf62-dc9546f23140" >
						<logger level="INFO" doc:name="Logger" doc:id="53d93621-0282-47a6-b0a4-9e5ff278a3be" message="continue"/>
					</on-error-continue>
				</error-handler>
			</try>
			</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert that" doc:id="f775d649-f281-4d47-a2fe-0309eeb36b86" is='#[MunitTools::equalTo(true)]' expression="#[payload.success]"/>
			</munit:validation>
		</munit:test>
	<munit:test name="sendMessageToAWSSQS-test_Success" doc:id="7df39ac1-0ad4-42a9-ae0f-582f09c93a98" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Send message to SQS" doc:id="5f08e35c-12fa-41a8-8cf8-7c4f68d7815e" processor="sqs:send-message">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="936c47d7-d221-408a-9c72-157dfad1ba17" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://sendMessageToAWSSQStestSuccess\mock_payload2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sendMessageToAWSSQStestSuccess\mock_attributes2.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="8e1d23f0-8f64-4635-b983-4d2e840c0771" >
				<munit:payload value="#[output application/json --- readUrl('classpath://sendMessageToAWSSQStestSuccess\set-event_payload1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://sendMessageToAWSSQStestSuccess\set-event_attributes1.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to sendMessageToAWSSQS" doc:id="4f3a429b-7563-4994-ab13-b367485283a2" name="sendMessageToAWSSQS"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b2a144e8-9eba-4d7e-87ed-22f80e0c14b7" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import sendMessageToAWSSQStestSuccess::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="receiveMessageFromSQSQueue-test_Success" doc:id="8961c380-6497-4a8f-bf6d-e95b66da0b7f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request" doc:id="5a62de38-2ac5-4851-b20b-3a36aa1394c3" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="140ce681-1992-4929-8232-71f4f82172b7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/json --- readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_payload1.dwl')]" mediaType="text/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_attributes1.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="e21728d4-d3a7-4d42-81cd-39c94547aef7" >
				<munit:payload value="#[output text/plain --- readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\set-event_payload2.dwl')]" encoding="UTF-8" mediaType="text/plain" />
				<munit:attributes value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\set-event_attributes2.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to receiveMessageFromSQSQueue" doc:id="dffad35f-9c66-4a29-a144-cd2270f7daf9" name="receiveMessageFromSQSQueue"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="8b81b6ef-b1de-4506-8435-6333bad659c6" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import receiveMessageFromSQSQueuetestSuccess::assert_expression_payload2
---
assert_expression_payload2::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="receiveMessageFromSQSQueue-test_Failure" doc:id="64f9eda8-5947-4d9a-b0bb-3c8fabb702e9">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock Request" doc:id="2eaed913-8445-4920-a75c-4e22a16d4845" processor="http:request">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="140ce681-1992-4929-8232-71f4f82172b7" attributeName="doc:id" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:payload value="#[output text/json --- readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_payload1.dwl')]" mediaType="text/json" encoding="UTF-8" />
						<munit-tools:attributes value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_attributes1.dwl')]" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
				<munit:set-event doc:name="Set Input" doc:id="23254d81-7426-48df-bda5-8be53139bc88">
					<munit:payload value="#[output text/plain --- readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\set-event_payload3.dwl')]" encoding="UTF-8" mediaType="text/plain" />
				<munit:attributes value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\set-event_attributes2.dwl')]" />
				</munit:set-event>
			</munit:behavior>
			<munit:execution>
				<try doc:name="Try" doc:id="0e644819-f791-4deb-9185-4b856f83ca1a" >
				<flow-ref doc:name="receiveMessageFromSQSQueue" doc:id="a8c7bc21-5ac1-40e5-bbc9-669ca3609416" name="receiveMessageFromSQSQueue" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="5f799e68-ff4b-41fb-a16f-b59edeef8d70" >
						<logger level="INFO" doc:name="Logger" doc:id="bae435b8-1b3e-47c2-9764-e0c13e4d650c" message="continue"/>
					</on-error-continue>
				</error-handler>
			</try>
			</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert that" doc:id="4ae78446-3bb7-4707-9307-22d6980eeca3" expression="#[payload.success]" is="#[MunitTools::equalTo(true)]" />
			</munit:validation>
		</munit:test>


</mule>
